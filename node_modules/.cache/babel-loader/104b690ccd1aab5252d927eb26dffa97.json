{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { getValue, storeValue } from '../utils/localStorage';\nexport const useLocalStorage = (key = '', initialValue = '') => {\n  _s();\n\n  const [state, setState] = useState(() => {\n    try {\n      const record = getValue(key);\n      return record || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const setLocalStorage = newState => {\n    try {\n      const newValue = typeof newState === 'function' ? newState(state) : newState;\n      setState(newValue);\n      storeValue(key, newValue);\n    } catch {\n      console.log('unable to store value');\n    }\n  };\n\n  return [state, setLocalStorage];\n};\n\n_s(useLocalStorage, \"ZdmGvf4sG+ugbSIyvDpfd1k+j3s=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/mariamipukhashvili/Desktop/React/cocktails/src/hooks/useLocalStorage.js"],"names":["useState","getValue","storeValue","useLocalStorage","key","initialValue","state","setState","record","setLocalStorage","newState","newValue","console","log"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,uBAArC;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,GAAG,GAAG,EAAP,EAAWC,YAAY,GAAG,EAA1B,KAAiC;AAAA;;AAC9D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,MAAM;AACvC,QAAI;AACF,YAAMQ,MAAM,GAAGP,QAAQ,CAACG,GAAD,CAAvB;AACA,aAAOI,MAAM,IAAIH,YAAjB;AACD,KAHD,CAGE,MAAM;AACN,aAAOA,YAAP;AACD;AACF,GAPiC,CAAlC;;AASA,QAAMI,eAAe,GAAIC,QAAD,IAAc;AACpC,QAAI;AACF,YAAMC,QAAQ,GAAG,OAAOD,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAACJ,KAAD,CAAzC,GAAmDI,QAApE;AACAH,MAAAA,QAAQ,CAACI,QAAD,CAAR;AACAT,MAAAA,UAAU,CAACE,GAAD,EAAMO,QAAN,CAAV;AACD,KAJD,CAIE,MAAM;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;AACF,GARD;;AAUA,SAAO,CAACP,KAAD,EAAQG,eAAR,CAAP;AACD,CArBM;;GAAMN,e;;AAuBb,eAAeA,eAAf","sourcesContent":["import { useState } from 'react'\nimport { getValue, storeValue } from '../utils/localStorage'\n\nexport const useLocalStorage = (key = '', initialValue = '') => {\n  const [state, setState] = useState(() => {\n    try {\n      const record = getValue(key)\n      return record || initialValue\n    } catch {\n      return initialValue\n    }\n  })\n\n  const setLocalStorage = (newState) => {\n    try {\n      const newValue = typeof newState === 'function' ? newState(state) : newState\n      setState(newValue)\n      storeValue(key, newValue)\n    } catch {\n      console.log('unable to store value')\n    }\n  }\n\n  return [state, setLocalStorage]\n}\n\nexport default useLocalStorage\n"]},"metadata":{},"sourceType":"module"}